name: React Web App CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore:
      - "README.md"
      - "docs/**"
      - ".gitignore"
  pull_request:
    branches: [ main ]

env:
  DOCKER_BUILDKIT: 1
  ECR_REPOSITORY: adi-project
  IMAGE_TAG: ${{ github.sha }}

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: |
          npm install

      - name: Run ESLint
        run: |
          npm run lint || echo "No lint script found"

      - name: Run Tests
        run: |
          npm test || echo "No test script found"

  build-and-push:
    name: Build and Push to ECR
    needs: integration
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
                      -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest .
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          echo "::set-output name=image::$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: self-hosted
    
    steps:
      - name: Clean Workspace
        run: |
          rm -rf node_modules
          rm -rf build
          rm -rf .next
          rm -rf .cache

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Clean Docker Resources
        run: |
          echo "Cleaning up Docker resources..."
          docker system prune -a -f || true
          docker volume prune -f || true
          echo "Current disk space:"
          df -h

      - name: Stop Existing Container
        run: |
          echo "Stopping existing container..."
          docker ps -q --filter "name=adi-app" | grep -q . && docker stop adi-app && docker rm -fv adi-app || true

      - name: Pull and Run New Container
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "Pulling new image..."
          docker pull $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          
          echo "Starting new container..."
          docker run -d \
            --name adi-app \
            --restart unless-stopped \
            -p 3000:3000 \
            -e NODE_ENV=production \
            $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

      - name: Health Check
        run: |
          echo "Waiting for application to start..."
          timeout=60
          while [ $timeout -gt 0 ]; do
            if curl -s http://localhost:3000 > /dev/null; then
              echo "Application is running!"
              exit 0
            fi
            echo "Waiting for application to become ready... ($timeout seconds left)"
            sleep 5
            timeout=$((timeout-5))
          done
          echo "Application failed to start. Logs:"
          docker logs adi-app
          exit 1

      - name: Show Container Status
        if: always()
        run: |
          echo "Container status:"
          docker ps -a
          echo "Container logs:"
          docker logs adi-app
